{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# We'll use the PyPlot (matplotlib) plotting library:\n",
    "# It works exactly as it would in Python.\n",
    "using PyPlot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: you can add text written in Markdown to this notebook to explain your work and your conclusions by adding a new cell (using the \"+\" icon on the toolbar), and setting it to be a markdown cell (by toggling the \"Code\" dropdown on the toolbar to say \"Markdown\" instead). \n",
    "\n",
    "For examples of how to use Markdown, look at the examples in this notebook, or [this cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Generate data\n",
    "Generate 50 random datapoints in 2 dimensions.\n",
    "Note that the last column is fixed at 1 to capture the offset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# don't change this: it sets the random number generator, \n",
    "# so everyone in the class will have consistent results\n",
    "srand(17)\n",
    "\n",
    "# set dimensions\n",
    "n = 50\n",
    "d = 2\n",
    "# generate input: the rows of X are the data points\n",
    "# notice the last column encodes the offset\n",
    "X = [randn(n, d) ones(n)]\n",
    "\n",
    "# Generate the target function w♮\n",
    "# Store the correct decision for each datapoint in y\n",
    "w♮ = randn(d+1)\n",
    "y = sign(X*w♮);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "PyPlot.Figure(PyObject <matplotlib.figure.Figure object at 0x7f4953a8b650>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot data points X and color according to y\n",
    "clf()\n",
    "hold(true)\n",
    "axis(\"off\")\n",
    "for i=1:n\n",
    "    plot(X[i,1], X[i,2], y[i]==1 ? \"ro\" : \"bd\")\n",
    "end\n",
    "\n",
    "# set figure limits\n",
    "ylim([-2,2])\n",
    "xlim([-2,2])\n",
    "savefig(\"perceptron_data_hw1.eps\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "plot_perceptron (generic function with 1 method)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\"\"\"\n",
    "This function takes data points X, plots them, and colors them correctly according to y.\n",
    "This function also plots the line w'*x = 0.\n",
    "We are plotting just the first two dimensions of x; \n",
    "the last (offset) coordinate of w sets the offset of the line from the origin.\n",
    "\"\"\"\n",
    "function plot_perceptron(X,y,w)\n",
    "    # plot data points X and color according to y\n",
    "    clf()\n",
    "    hold(true)\n",
    "    axis(\"off\")\n",
    "    for i=1:50\n",
    "        plot(X[i,1], X[i,2], y[i]==1 ? \"ro\" : \"bd\")\n",
    "    end\n",
    "    \n",
    "    # plot vector w\n",
    "    x1samples = [minimum(X[:,1]), maximum(X[:,1])]\n",
    "    if w[2]!=0\n",
    "        plot(x1samples, [-(w[1]*x1 + w[3])/w[2] for x1 in x1samples], color=\"black\")\n",
    "    end\n",
    "    \n",
    "    # set figure limits\n",
    "    ylim([-2,2])\n",
    "    xlim([-2,2])\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "PyPlot.Figure(PyObject <matplotlib.figure.Figure object at 0x7f4954052150>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(-2,2)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Double check our function by plotting the points with the truth vector \n",
    "plot_perceptron(X,y,w♮)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# a) Code the missing parts of the Perceptron algorithm\n",
    "Inputs to Perceptron are: \n",
    "* required arguments:\n",
    "    * X = data points\n",
    "    * Y = true values\n",
    "* optional arguments:\n",
    "    * maxsteps = maximum number of updates to w (default: 100)\n",
    "    * w = initial guess of w (default: random)\n",
    "\n",
    "Perceptron should start with the input guess of w, make at most maxsteps updates, and return the final w."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "perceptron (generic function with 1 method)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function perceptron(X,y)\n",
    "    maxsteps=100\n",
    "    w = rand(size(X,2))# initial guess for w\n",
    "    count=0\n",
    "    for j=1:maxsteps\n",
    "        flag=0 #variable to check if the perceptron has been achieved \n",
    "        for i=1:50\n",
    "            K=w'*X'\n",
    "            if y[i]!=sign(K[i])\n",
    "                w=w + (((y[i])-sign(K[i]))*X[i,:])' \n",
    "                flag=1\n",
    "                count+=1 #number of updates made to w\n",
    "            end \n",
    "        end\n",
    "        if flag==0 #the value of w corresponds to the perceptron\n",
    "            break\n",
    "        end\n",
    "        \n",
    "    end\n",
    "    println(\"Number of updates taken=\")\n",
    "    print(count)\n",
    "    return w\n",
    "end\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the main function for the perceptron. I have taken maxsteps to be the maximum number of times we run the outer loop over the entire matrix X, i.e how many times we go over the data. My formula for updating w is slightly different from the one in class, but it works fine and takes fewer number of updates as well.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# b) Run perceptron on linearly separable data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of updates taken=\n",
      "49\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "PyPlot.Figure(PyObject <matplotlib.figure.Figure object at 0x7f4952c5dbd0>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final value of w=[1.5364448907965031\n",
      " -12.41878368972143\n",
      " -13.840999121060218]"
     ]
    }
   ],
   "source": [
    "\n",
    "function plot_perceptron_h(X,y,w,w_r) #to plot both the true vector w♮ and the perceptron hypothesis\n",
    "    # plot data points X and color according to y\n",
    "    clf()\n",
    "    hold(true)\n",
    "    axis(\"off\")\n",
    "    for i=1:50\n",
    "        plot(X[i,1], X[i,2], y[i]==1 ? \"ro\" : \"bd\")\n",
    "    end\n",
    "    \n",
    "    # plot vector w\n",
    "    x1samples = [minimum(X[:,1]), maximum(X[:,1])]\n",
    "    if w[2]!=0\n",
    "        plot(x1samples, [-(w[1]*x1 + w[3])/w[2] for x1 in x1samples], color=\"black\")\n",
    "    end\n",
    "    # plot vector w_r\n",
    "    x1samples = [minimum(X[:,1]), maximum(X[:,1])]\n",
    "    if w_r[2]!=0\n",
    "        plot(x1samples, [-(w_r[1]*x1 + w_r[3])/w_r[2] for x1 in x1samples], color=\"black\")\n",
    "    end\n",
    "    \n",
    "    # set figure limits\n",
    "    ylim([-2,2])\n",
    "    xlim([-2,2])\n",
    "end\n",
    "w_final=perceptron(X,y)\n",
    "plot_perceptron_h(X,y,w_final,w♮)\n",
    "\n",
    "print(\"\\n\")\n",
    "print(\"Final value of w=\")\n",
    "print(w_final)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I have run the perceptron on the linearly separable dataset. I have plotted both the true vector w♮ and the perceptron's hypothesis. As can be seen they both divide the dataset accurately and are very close to each other."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# c) Run perceptron on data sets of size n = 20, 100, and 1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For 20 the number of updates taken=\n",
      "19\n",
      "\n",
      "For 100 the number of updates taken=\n",
      "25\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "PyPlot.Figure(PyObject <matplotlib.figure.Figure object at 0x7f4952d0ddd0>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For 1000 the number of updates taken=\n",
      "242\n",
      "\n"
     ]
    }
   ],
   "source": [
    "function perceptron2(X,y,n) #new perceptron function, that takes size as an argument\n",
    "    maxsteps=100\n",
    "    w = rand(size(X,2))# initial guess for w\n",
    "    count=0\n",
    "    for j=1:maxsteps\n",
    "        flag=0\n",
    "        for i=1:n\n",
    "            K=w'*X'\n",
    "            if y[i]!=sign(K[i])\n",
    "                w=w + (((y[i])-sign(K[i]))*X[i,:])'\n",
    "                flag=1\n",
    "                count+=1\n",
    "            end \n",
    "        end\n",
    "            if flag==0\n",
    "                break\n",
    "            end\n",
    "        \n",
    "    end\n",
    "    print(\"For \")\n",
    "    print(n)\n",
    "    println(\" the number of updates taken=\")\n",
    "    print(count)\n",
    "    print(\"\\n\")\n",
    "    return w\n",
    "end\n",
    "\n",
    "function plot_perceptron2(X,y,w,n,w_r) #new plotting function that takes size as argument\n",
    "    # plot data points X and color according to y\n",
    "    clf()\n",
    "    hold(true)\n",
    "    axis(\"off\")\n",
    "    for i=1:n\n",
    "        plot(X[i,1], X[i,2], y[i]==1 ? \"ro\" : \"bd\")\n",
    "    end\n",
    "    \n",
    "    # plot vector w\n",
    "    x1samples = [minimum(X[:,1]), maximum(X[:,1])]\n",
    "    if w[2]!=0\n",
    "        plot(x1samples, [-(w[1]*x1 + w[3])/w[2] for x1 in x1samples], color=\"black\")\n",
    "    end\n",
    "    # plot vector w_r\n",
    "    x1samples = [minimum(X[:,1]), maximum(X[:,1])]\n",
    "    if w_r[2]!=0\n",
    "        plot(x1samples, [-(w_r[1]*x1 + w_r[3])/w_r[2] for x1 in x1samples], color=\"black\")\n",
    "    end\n",
    "    # set figure limits\n",
    "    ylim([-2,2])\n",
    "    xlim([-2,2])\n",
    "end\n",
    "\n",
    "numb=[20,100,1000]\n",
    "for b in numb\n",
    "    n = b\n",
    "    d = 2\n",
    "    # generate input: the rows of X are the data points\n",
    "    # notice the last column encodes the offset\n",
    "    X = [randn(n, d) ones(n)]\n",
    "\n",
    "    # Generate the target function w♮\n",
    "    # Store the correct decision for each datapoint in y\n",
    "    w♮ = randn(d+1)\n",
    "    y = sign(X*w♮);\n",
    "    w=perceptron2(X,y,n)\n",
    "    print(\"\\n\")\n",
    "    plot_perceptron2(X,y,w,n,w♮)\n",
    "end    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I have run the perceptron on datasets of sizes n=20,100 and 1000. As can be easily understood the number of updates in the case of 20 datapoints is less than those for 100 datapoints which is in turn less than that for 1000 datapoints. Due to space limitations the output is only able to show one of the figures, although I have attempted to plot all three. In the case of 1000 datapoints it can be seen that the true vector w♮is almost perfectly coinciding with our perceptron hypothesis function. This suggests that a greater number of data points increases the accuracy of the perceptron and brings it closer to the true vector."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# d) Run perceptron on data set of size n = 1000 with dimension d = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For 1000 the number of updates taken=\n",
      "2334\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "11x1 Array{Float64,2}:\n",
       "   34.4799\n",
       "   55.4245\n",
       " -140.406 \n",
       " -108.056 \n",
       "   11.2646\n",
       "   -8.7551\n",
       "   36.4237\n",
       "  -45.4409\n",
       "   93.8474\n",
       "   24.5533\n",
       "  -23.1337"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n = 1000\n",
    "d = 10\n",
    "\n",
    "X = [randn(n, d) ones(n)]\n",
    "\n",
    "\n",
    "w♮ = randn(d+1)\n",
    "y = sign(X*w♮)\n",
    "w=perceptron2(X,y,n)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For data with dimension 10, the number of updates taken is larger than that for data with dimension 2. I have not plotted this data as 10 dimensional data cannot accurately be represented in 2 dimensions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# e) Run perceptron on dataset from (d) 100 times.\n",
    "Plot a histogram for the number of updates that the algorithm takes to converge.\n",
    "\n",
    "For this portion, make sure your perceptron implementation picks the next consideration point x(t) randomly instead of deterministically."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "PyPlot.Figure(PyObject <matplotlib.figure.Figure object at 0x7f49537bfc90>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "([2.0,2.0,11.0,24.0,21.0,22.0,10.0,5.0,1.0,2.0],[1763.0,1787.5,1812.0,1836.5,1861.0,1885.5,1910.0,1934.5,1959.0,1983.5,2008.0],Any[PyObject <matplotlib.patches.Rectangle object at 0x7f4953823550>,PyObject <matplotlib.patches.Rectangle object at 0x7f4953823b90>,PyObject <matplotlib.patches.Rectangle object at 0x7f49566ffc50>,PyObject <matplotlib.patches.Rectangle object at 0x7f49566ff190>,PyObject <matplotlib.patches.Rectangle object at 0x7f49566ffe10>,PyObject <matplotlib.patches.Rectangle object at 0x7f49566f4610>,PyObject <matplotlib.patches.Rectangle object at 0x7f49566f4c90>,PyObject <matplotlib.patches.Rectangle object at 0x7f49566d1350>,PyObject <matplotlib.patches.Rectangle object at 0x7f49566d19d0>,PyObject <matplotlib.patches.Rectangle object at 0x7f49566d1ed0>])"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function perceptron3(X,y,n,ar) #new perceptron function, that picks next point randomly\n",
    "    maxsteps=100\n",
    "    w = rand(size(X,2))# initial guess for w\n",
    "    count=0\n",
    "    for j=1:maxsteps\n",
    "        flag=0\n",
    "        for k=1:n\n",
    "            i=rand(1:n)\n",
    "            K=w'*X'\n",
    "            if y[i]!=sign(K[i])\n",
    "                w=w + (((y[i])-sign(K[i]))*X[i,:])'\n",
    "                flag=1\n",
    "                count+=1\n",
    "            end \n",
    "        end\n",
    "            if flag==0\n",
    "                break\n",
    "            end\n",
    "        \n",
    "    end\n",
    "    push!(ar,count)\n",
    "    return w\n",
    "end\n",
    "arr=[1]\n",
    "for c=1:100\n",
    "    w=perceptron3(X,y,n,arr)\n",
    "end   \n",
    "histo=arr[2:101]\n",
    "plt[:hist](histo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I have plotted a histogram for the number of updates that the algorithm takes to converge for 100 experiments. In the iterations of the perceptron algorithm for this part, the next consideration point x(t) is picked randomly instead of deterministically. As can be seen from the graph the histogram appears to be partially similiar to a normal distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# f) Summary and conclusions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the value of n increases, the running time increases as the number of iterations has increased. With increasing n the accuracy of our perceptron hypothesis also increases and it becomes very close to the true vector w♮, this is again due to the large number of datapoints and iterations that push our hypothesis closer and closer to the true value. With increasing d, there is no significant change in the running time as I have used matrix addition, hence the number of loops overall remains the same. As the number of dimensions increases the number of updates needed to arrive at the hypothesis increases, sometimes the number of updates needed is too much and then we break out of the loop before the hypothesis is completely accurate, leading to a few errors. Hence a greater value of d reduces the accuracy as well."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# g) Add an outlier. What happens?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "PyPlot.Figure(PyObject <matplotlib.figure.Figure object at 0x7f4953a8b650>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of updates taken=\n",
      "270"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(-2,2)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# (re)generate data with same random seed\n",
    "srand(17)\n",
    "# set dimensions\n",
    "n = 50\n",
    "d = 2\n",
    "# generate input\n",
    "X = [randn(n, d) ones(n)]\n",
    "w♮ = randn(d+1)\n",
    "y = sign(X*w♮);\n",
    "y[1] *= -1 # flip classification of the first data point\n",
    "\n",
    "# run the perceptron and see what happens\n",
    "w2=perceptron(X,y)\n",
    "plot_perceptron(X,y,w2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "So by some luck, in my case, the perceptron still works even with the point being an outlier. However this is purely due to chance and in the next step I write an algorithm that would work for any data having outliers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# h) Try out one idea to fix perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "PyPlot.Figure(PyObject <matplotlib.figure.Figure object at 0x7f4953f58050>)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of updates taken=\n",
      "270"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(-2,2)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function perceptron4(X,y) #perceptron to fix problem of having a few wrong values\n",
    "    maxsteps=100\n",
    "    w = rand(size(X,2))# initial guess for w\n",
    "    count=0\n",
    "    w_arr = Array(Float64,(0,3)) #array to record every vector w we get\n",
    "    num_errors=[1000] #array that will record the number of errors for each w\n",
    "    for j=1:maxsteps\n",
    "        flag=0\n",
    "        for i=1:50\n",
    "            K=w'*X'\n",
    "            if y[i]!=sign(K[i])\n",
    "                w=w + (((y[i])-sign(K[i]))*X[i,:])'\n",
    "                flag=1\n",
    "                count+=1\n",
    "            end \n",
    "        end\n",
    "        \n",
    "        w_arr = vcat(w_arr , w') #add this w to our array\n",
    "        n_err=0\n",
    "        for i=1:50 #find the number of errors for this particular w\n",
    "            K=w'*X'\n",
    "            if y[i]!=sign(K[i])\n",
    "                n_err+=1\n",
    "            end\n",
    "        end\n",
    "        push!(num_errors,n_err) #add this number of errors to our array\n",
    "        if flag==0\n",
    "            break\n",
    "        end\n",
    "        \n",
    "        \n",
    "    end\n",
    "    min=num_errors[1]\n",
    "    k=1\n",
    "    for i=2:length(num_errors) #find the index corresponding to minimum errors\n",
    "        if(num_errors[i]<min)\n",
    "            min=num_errors[i]\n",
    "            k=i-1\n",
    "        end\n",
    "    end\n",
    "    \n",
    "    \n",
    "    println(\"Number of updates taken=\")\n",
    "    print(count)\n",
    "    \n",
    "    return w_arr[k,:] #return the w corresponding to index with minimum errors\n",
    "end\n",
    "\n",
    "# (re)generate data with same random seed\n",
    "srand(17)\n",
    "# set dimensions\n",
    "n = 50\n",
    "d = 2\n",
    "# generate input\n",
    "X = [randn(n, d) ones(n)]\n",
    "w♮ = randn(d+1)\n",
    "y = sign(X*w♮);\n",
    "y[1] *= -1 # flip classification of the first data point\n",
    "\n",
    "# run the perceptron and see what happens\n",
    "w2=perceptron4(X,y)\n",
    "plot_perceptron(X,y,w2)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In my algorithm to fix the problem of having outlier values, we keep a track of every w we get, and the number of errors in the data associated with that particular w. Once the outer loop has run maxstep number of times without breaking out of the loop (this means there are outliers), we then return the w corresponding to the minimum number of errors."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 0.4.6",
   "language": "julia",
   "name": "julia-0.4"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "0.4.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
